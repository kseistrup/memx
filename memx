#!/usr/bin/python3
# -*- mode: python; coding: utf-8 -*-
"""
Usage: memx [OPTIONS] COMMAND [ARG [ARG …]]

Positional arguments:
  COMMAND               command to run
  ARG                   optional arg(s)

Optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show version information and exit
  -c, --copyright       show copying policy and exit
  -f, --force           re-run command no matter what
  -d [DIR], --dir [DIR]
                        where to store cache data
  -t [TTL], --ttl [TTL]
                        time before we re-run command
"""
##############################################################################
# This program is free software; you can redistribute it and/or modify it    #
# under the terms of the GNU General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)  #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful, but with-  #
# out any warranty; without even the implied warranty of merchantability or  #
# fitness for a particular purpose.  See the GNU General Public License for  #
# more details.  <http://gplv3.fsf.org/>                                     #
##############################################################################

import sys
import os
import logging
import argparse
import pathlib
import subprocess

from pprint import pprint
from hashlib import sha256

try:
    from locale import (Error, setlocale, LC_ALL)
    _ = setlocale(LC_ALL, '')
except (ImportError, NameError, Error):
    pass

__author__ = 'Klaus Alexander Seistrup <klaus@seistrup.dk>'
__whoami__ = 'memx'
__revision__ = '2016-09-11'
__version__ = '0.0.1 ({})'.format(__revision__)
__copyright__ = """\
memx {}
Copyright © 2015-16 Klaus Alexander Seistrup <klaus@seistrup.dk>

This is free software; see the source for copying conditions.  There is no
warranty; not even for merchantability or fitness for a particular purpose.\
""".format(__version__)

DEBUG = os.environ.get('DEBUG', 'False')[0].upper() in '1JTY'  # 1/Ja/True/Yes
MYLOG = logging.getLogger(__whoami__)

DEFAULT_TTL = 60 * 60  # Seconds
DEFAULT_DIR = pathlib.Path('~/.cache/{}'.format(__whoami__)).expanduser()


class Config(dict):
    """Simple dot-dict implementation"""
    def __getattr__(self, attr):
        return self.get(attr, None)
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__


def die(message=None):
    """Exit gracefully"""
    if message:
        MYLOG.error(message)
    sys.exit(1 if message else 0)


def get_config(args):
    """Store configuration in a dot-dict object"""
    config = Config()
    config.force = args.force
    config.dir = args.dir or DEFAULT_DIR
    config.ttl = args.ttl or DEFAULT_TTL
    config.command = [args.COMMAND] + args.ARG

    if DEBUG:
        pprint(config)

    return config


def main(progname=__whoami__):
    """Main entry point"""

    parser = argparse.ArgumentParser(
        prog=progname,
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s/' + __version__,
                        help='show version information and exit')
    parser.add_argument('-c', '--copyright', action='version',
                        version=__copyright__,
                        help='show copying policy and exit')
    parser.add_argument('-f', '--force', action='store_true',
                        help='re-run command no matter what')
    parser.add_argument('-d', '--dir', nargs='?',
                        help='where to store cache data')
    parser.add_argument('-t', '--ttl', type=int, nargs='?',
                        help='time before we re-run command')
    parser.add_argument('COMMAND', help='command to run')
    parser.add_argument('ARG', nargs='*', help='optional arg(s)')

    config = get_config(parser.parse_args())

    raise NotImplementedError('not yet ready for consumption')

if __name__ == '__main__':
    sys.exit(main(pathlib.Path(sys.argv[0]).name))

# eof
