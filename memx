#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
"""
Usage: memx [OPTIONS] -- COMMAND [ARG [ARG …]]

Positional arguments:
  COMMAND               command to run
  ARG                   optional argument(s) to command

Optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show version information and exit
  -c, --copyright       show copying policy and exit
  -f, --force           re-run command no matter what
  -d [DIR], --dir [DIR]
                        where to store cache data (default: ~/.cache)
  -t [TTL], --ttl [TTL]
                        time before we re-run command (default: never)
  -x [CONTEXT], --context [CONTEXT]
                        free form context
"""
##############################################################################
# This program is free software; you can redistribute it and/or modify it    #
# under the terms of the GNU General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)  #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful, but with-  #
# out any warranty; without even the implied warranty of merchantability or  #
# fitness for a particular purpose. See the GNU General Public License for   #
# more details. <http://gplv3.fsf.org/>                                      #
##############################################################################

import sys
import os
import argparse
import hmac

import pathlib
from pathlib import PosixPath

import subprocess
from subprocess import PIPE

from hashlib import (sha256, sha512)
from time import time

from pprint import pprint

try:
    from locale import (Error, setlocale, LC_ALL)
    _ = setlocale(LC_ALL, '')
except (ImportError, NameError, Error):
    pass

__author__ = 'Klaus Alexander Seistrup <klaus@seistrup.dk>'
__whoami__ = 'memx'
__revision__ = '2016-09-19'
__version__ = '0.2.3 ({})'.format(__revision__)
__copyright__ = """\
memx {}
Copyright © 2015-16 Klaus Alexander Seistrup <klaus@seistrup.dk>

This is free software; see the source for copying conditions. There is no
warranty; not even for merchantability or fitness for a particular purpose.\
""".format(__version__)

DEBUG = os.environ.get('DEBUG', 'False')[0].upper() in '1JTY'  # 1/Ja/True/Yes

DEFAULT_TTL = -1  # Infinity
CACHE_HOME = pathlib.Path(os.environ.get('XDG_CACHE_HOME', '~/.cache'))
DEFAULT_DIR = (CACHE_HOME / __whoami__).as_posix()

DEV_STDOUT = '/dev/stdout'
DEV_STDERR = '/dev/stderr'


class Config(dict):
    """Simple dot-dict implementation"""
    def __getattr__(self, attr):
        return self.get(attr, None)
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__


def die(error=None):
    """Exit gracefully"""
    returncode = 1 if error else 0
    if error:
        if isinstance(error, bytes):
            error = error.decode('utf-8')
        if not isinstance(error, str):
            error = str(error)
        if error.startswith('[Errno '):
            error = error.split(']', 1)[1].lstrip()
        print(error, file=sys.stderr)
    sys.exit(returncode)


def debug(head, data):
    """Possibly pretty print an object to stderr"""
    if DEBUG:
        pprint({head: data}, stream=sys.stderr)


def has_space(string):
    """Does string have a whitespace in it?"""
    # This could be done with filter(),
    # but that would also be less legible.
    for char in string:
        if char.isspace():
            return True
    return False


def as_posix(fpath):
    """Convert a PosixPath to a str instance"""
    return fpath.as_posix() if isinstance(fpath, PosixPath) else fpath


def as_utf8(string):
    """Encode a string as a UTF-8 bytearray"""
    return string.encode('utf-8')


def get_digest(config):
    """Return a suitable HMAC digest for the current configuration"""
    hasher = hmac.new(as_utf8(as_posix(config.cwd)), digestmod=sha512)
    hasher.update(as_utf8(as_posix(pathlib.Path.home())))
    hasher.update(as_utf8('{}:{}'.format(os.getuid(), os.getgid())))
    hasher.update(as_utf8(config.cmdline))
    if config.context:
        hasher.update(as_utf8(config.context))
    return sha256(hasher.digest()).hexdigest()


def get_config(args):
    """Store configuration parameters in a dot-dict object"""
    config = Config()
    config.force = args.force
    config.cachedir = pathlib.Path(args.dir or DEFAULT_DIR).expanduser()
    config.ttl = int(round(args.ttl or DEFAULT_TTL))
    config.cwd = pathlib.Path.cwd()
    config.vargs = [args.COMMAND] + args.ARG
    elms = [
        '{!r}'.format(arg) if has_space(arg) else arg for arg in config.vargs
    ]
    config.cmdline = ' '.join(elms)
    config.context = args.context or ''
    config.digest = get_digest(config)
    config.hashdir = config.cachedir / config.digest
    config.cmdfile = config.hashdir / 'cmdline'
    config.ctxfile = config.hashdir / 'context'
    config.cwdfile = config.hashdir / 'cwd'
    config.errfile = config.hashdir / 'stderr'
    config.outfile = config.hashdir / 'stdout'
    config.rcfile = config.hashdir / 'rc'

    debug('conf', config)

    return config


def file_age(fname):
    """Return the age of a file in seconds"""
    return int(round(time() - fname.stat().st_mtime))


def copy_contents(infile, outfile):
    """Copy contents from INFILE to OUTFILE"""
    try:
        with open(as_posix(infile), 'rb') as inptr:
            with open(as_posix(outfile), 'wb') as outptr:
                outptr.write(inptr.read())
    except (IOError, OSError, PermissionError) as error:
        die(error)


def replay_command(config):
    """Display results of a previous command execution"""
    returncode = -1

    copy_contents(config.outfile, DEV_STDOUT)
    copy_contents(config.errfile, DEV_STDERR)

    try:
        with open(as_posix(config.rcfile), 'r') as fptr:
            returncode = int(fptr.readline().strip())
    except (IOError, OSError, PermissionError, ValueError) as error:
        die(error)

    return returncode


def write_to_files(buf, mode, *filepaths):
    """Write the same buffer to multiple files"""
    for fpath in filepaths:
        try:
            # Deliberately create a file if buf is empty
            with open(as_posix(fpath), mode) as fptr:
                if buf:
                    fptr.write(buf)
                    if 'b' not in mode:
                        fptr.write('\n')
        except (IOError, OSError, PermissionError) as error:
            die(error)


def run_command(config):
    """Really run a command"""
    try:
        proc = subprocess.run(config.vargs, stdout=PIPE, stderr=PIPE)
    except OSError as error:
        die(error)

    config.hashdir.mkdir(mode=0o0750, parents=True, exist_ok=True)

    write_to_files(proc.stdout, 'wb', config.outfile, DEV_STDOUT)
    write_to_files(proc.stderr, 'wb', config.errfile, DEV_STDERR)
    write_to_files('{}'.format(proc.returncode), 'w', config.rcfile)
    write_to_files(config.cmdline, 'w', config.cmdfile)
    write_to_files(as_posix(config.cwd), 'w', config.cwdfile)
    write_to_files(config.context, 'w', config.ctxfile)

    return proc.returncode


def run_or_replay(config):
    """Decide whether to replay a command or not"""
    if config.force or not config.ttl:
        return run_command(config)
    if not (config.hashdir.exists() and
            config.cmdfile.exists() and
            config.ctxfile.exists() and
            config.cwdfile.exists() and
            config.errfile.exists() and
            config.outfile.exists() and
            config.rcfile.exists()):
        return run_command(config)
    if config.ttl != -1 and file_age(config.outfile) > config.ttl:
        return run_command(config)
    return replay_command(config)


def main(progname=__whoami__):
    """Main entry point"""

    debug('argv', sys.argv)

    parser = argparse.ArgumentParser(
        prog=progname,
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s/{}'.format(__version__),
                        help='show version information and exit')
    parser.add_argument('-c', '--copyright', action='version',
                        version=__copyright__,
                        help='show copying policy and exit')
    parser.add_argument('-f', '--force', action='store_true',
                        help='re-run command no matter what')
    parser.add_argument('-d', '--dir', nargs='?',
                        help='where to store cache data (default: ~/.cache)')
    parser.add_argument('-t', '--ttl', type=int, nargs='?',
                        help='time before we re-run command (default: never)')
    parser.add_argument('-x', '--context', nargs='?', default='',
                        help='free form context')
    parser.add_argument('COMMAND', help='command to run')
    parser.add_argument('ARG', nargs='*', help='optional argument(s) to command')

    args = parser.parse_args()
    debug('args', args)

    config = get_config(args)

    return run_or_replay(config)

if __name__ == '__main__':
    PROGNAME = pathlib.Path(sys.argv[0]).name
    debug('prog', PROGNAME)
    sys.exit(main(PROGNAME))

# eof
